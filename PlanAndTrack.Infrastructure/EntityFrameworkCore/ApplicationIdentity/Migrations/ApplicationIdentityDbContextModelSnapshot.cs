// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlanAndTrack.Infrastructure.EntityFrameworkCore.ApplicationIdentity;

#nullable disable

namespace PlanAndTrack.Infrastructure.EntityFrameworkCore.ApplicationIdentity.Migrations
{
    [DbContext(typeof(ApplicationIdentityDbContext))]
    partial class ApplicationIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "e0f0c447-05f4-4614-bf9a-f66bf45ccf71",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "cfdcf05f-86fa-4ad9-8610-85aae7229e62",
                            ConcurrencyStamp = "0b560487-33a6-490c-930c-90c3468b8c9e",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "7736c583-ea00-4315-99b1-39543dcdf947",
                            ConcurrencyStamp = "8c8f39a6-1a79-4c3b-941d-32d24c03b255",
                            Name = "Tester",
                            NormalizedName = "TESTER"
                        },
                        new
                        {
                            Id = "f542aa5e-a76e-4f80-9ac3-77d40413fcdf",
                            ConcurrencyStamp = "8d0face6-7a23-4fa9-be81-34c9f658a8f8",
                            Name = "Requester",
                            NormalizedName = "REQUESTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5ff5d54-0124-4bb2-9a39-a38a54b5d333",
                            Email = "admin@planandtrack.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PLANANDTRACK.COM",
                            NormalizedUserName = "ADMIN@PLANANDTRACK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG+EzWDhVtLUwwlICcxejm43MFnd8ohEXAsJdZW0UjwdscVMmo6zkXkEv9V0XoMaRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51c38f6c-e989-4054-b2ec-3591946d94c2",
                            TwoFactorEnabled = false,
                            UserName = "admin@planandtrack.com"
                        },
                        new
                        {
                            Id = "9578dd3d-af52-419f-a24b-6e7259409d06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eabf8f9b-9ee0-41ad-885b-2a1c4285c1bd",
                            Email = "manager@planandtrack.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@PLANANDTRACK.COM",
                            NormalizedUserName = "MANAGER@PLANANDTRACK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED30VCc5GRaXUE8jpENWF2z1YN7MEYC52kaysny9XmqpZqT/oBenLkBlr2lgdctO8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0ccc377-a317-4928-b9c9-4f04962a979b",
                            TwoFactorEnabled = false,
                            UserName = "manager@planandtrack.com"
                        },
                        new
                        {
                            Id = "49f63f0f-8d3d-4daf-98c7-4a82b88e1a29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97fe0914-f805-4f10-a1a6-6212c486ba55",
                            Email = "tester@planandtrack.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTER@PLANANDTRACK.COM",
                            NormalizedUserName = "TESTER@PLANANDTRACK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMGNiJ4sxTQayVu359nMNHVXT6C2d490QOBPZICC3pH5PWX0PTRPgboZgbKdImFNfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b5c9ae6-b914-4399-9c8b-fb5394fa2b71",
                            TwoFactorEnabled = false,
                            UserName = "tester@planandtrack.com"
                        },
                        new
                        {
                            Id = "85691b8a-93d0-4e5f-a411-389b421ba694",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1652cd2f-02b5-4f39-8dc5-eac7a748b6e2",
                            Email = "requester1@planandtrack.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "REQUESTER1@PLANANDTRACK.COM",
                            NormalizedUserName = "REQUESTER1@PLANANDTRACK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKT+C3sHpz3ezvHy36g2g4vNGVoYpRClhXAErAMwxiONgRi1b7AvXNA5MJNNDLO0tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c37665d9-8000-4c76-9164-1103a164821d",
                            TwoFactorEnabled = false,
                            UserName = "requester1@planandtrack.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "9578dd3d-af52-419f-a24b-6e7259409d06",
                            RoleId = "cfdcf05f-86fa-4ad9-8610-85aae7229e62"
                        },
                        new
                        {
                            UserId = "49f63f0f-8d3d-4daf-98c7-4a82b88e1a29",
                            RoleId = "7736c583-ea00-4315-99b1-39543dcdf947"
                        },
                        new
                        {
                            UserId = "85691b8a-93d0-4e5f-a411-389b421ba694",
                            RoleId = "f542aa5e-a76e-4f80-9ac3-77d40413fcdf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
