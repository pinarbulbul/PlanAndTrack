// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlanAndTrack.Infrastructure.EntityFrameworkCore.TestRequest;

#nullable disable

namespace PlanAndTrack.Infrastructure.EntityFrameworkCore.TestRequest.Migrations
{
    [DbContext(typeof(TestRequestDbContext))]
    [Migration("20221027220843_InitialTestRequest")]
    partial class InitialTestRequest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FinishedImportanceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("FinishedNumber")
                        .HasColumnType("integer");

                    b.Property<int>("FinishedTime")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("PlannedPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("PromisedImportanceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("PromisedNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PromisedTime")
                        .HasColumnType("integer");

                    b.Property<int>("TotalImportanceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("TotalNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlannedPeriodId")
                        .IsUnique();

                    b.ToTable("PlanPerformance");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ActualPeriodEnd")
                        .HasColumnType("date");

                    b.Property<string>("AppliedTypeString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AppliedType");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly>("PeriodStart")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PlannedPeriodEnd")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PlanPeriod");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanPeriodResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Available")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("PlannedPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("Promised")
                        .HasColumnType("integer");

                    b.Property<string>("TestTypeString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TestType");

                    b.Property<int>("Used")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlannedPeriodId");

                    b.ToTable("PlanPeriodResource");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanTestRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Assignee")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("LeftTimeRequired")
                        .HasColumnType("integer");

                    b.Property<int>("PlannedPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("TestRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeRequired")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlannedPeriodId");

                    b.HasIndex("TestRequestId");

                    b.ToTable("PlanTestRequest");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.TestRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea");

                    b.Property<int>("ImportanceLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("LeftTimeRequired")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PreRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("StatusString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<string>("TestTypeString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TestType");

                    b.Property<int?>("TimeRequired")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreRequestId");

                    b.ToTable("TestRequest");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanPerformance", b =>
                {
                    b.HasOne("PlanAndTrack.Domain.Entities.PlanPeriod", "PlanPeriod")
                        .WithOne("PlanPerformance")
                        .HasForeignKey("PlanAndTrack.Domain.Entities.PlanPerformance", "PlannedPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanPeriod");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanPeriodResource", b =>
                {
                    b.HasOne("PlanAndTrack.Domain.Entities.PlanPeriod", "PlanPeriod")
                        .WithMany("PlanPeriodResource")
                        .HasForeignKey("PlannedPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanPeriod");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanTestRequest", b =>
                {
                    b.HasOne("PlanAndTrack.Domain.Entities.PlanPeriod", "PlanPeriod")
                        .WithMany("PlanTestRequests")
                        .HasForeignKey("PlannedPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanAndTrack.Domain.Entities.TestRequest", "TestRequest")
                        .WithMany("TestRequestPlans")
                        .HasForeignKey("TestRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanPeriod");

                    b.Navigation("TestRequest");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.TestRequest", b =>
                {
                    b.HasOne("PlanAndTrack.Domain.Entities.TestRequest", "PreRequestTestRequest")
                        .WithMany()
                        .HasForeignKey("PreRequestId");

                    b.Navigation("PreRequestTestRequest");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.PlanPeriod", b =>
                {
                    b.Navigation("PlanPerformance");

                    b.Navigation("PlanPeriodResource");

                    b.Navigation("PlanTestRequests");
                });

            modelBuilder.Entity("PlanAndTrack.Domain.Entities.TestRequest", b =>
                {
                    b.Navigation("TestRequestPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
